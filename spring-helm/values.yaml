## Spring,mysql,mongo? configuration
##
nameOverride: spring
fullnameOverride: ""

##############################################################
##############    BACKEND    ####################################
##############################################################
backend:
  name: to-do-app-backend #for app label and app name
  labels:
    tier: backend
  
  replicaCount: 1

  image:
    repository: sonker/todoapp-backend-openjdk
    tag: 1.0
    imagePullPolicy: Always
  imageCredentials:
    registry: docker.io
    username: ssonker
    password: hidden 

  springProfileActive: dev
  mongoUser: svc-dev-m2da-app
  mongoPass: ycDo8velsGHLp*f
  mongoUri: ls-service-mongodb.marsh-location-services-test.svc.cluster.local

  config:
    ## Currently only supports file
    type: file
    ## Contents of config in YAML
    content: |-
      spring:
        datasource:
          type: com.zaxxer.hikari.HikariDataSource
          hikari:
            idle-timeout: 10000
          platform: mysql
          username: ${DB_USERNAME}
          password: ${DB_PASSWORD}
          url: jdbc:mysql://${DB_HOST}/${DB_NAME}
        jpa:
          hibernate:
            naming:
              physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  ## Configures the controller port
  containerPort: 8082
  service:
    enabled: true
    httpPort: 80
    ## If service.type is not set to NodePort, the following statement
    ## will be ignored.
    ##
    # nodePort: 32015

    ## Service type can be set to ClusterIP, NodePort or LoadBalancer.
    ##
    type: ClusterIP

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
    
  ## Labels to set container specific security contexts
  containerSecurityContext: {}
    # capabilities:
    #   drop:
    #     - all

  ## uncomment and modify the following livenessProbe and readinessProbe.
  ## These defaults should work with anything that uses the spring health actuator.
  livenessProbe: {}
  #  httpGet:
  #    path: /actuator/health
  #    port: http
  #  initialDelaySeconds: 300
  #  periodSeconds: 10
  readinessProbe: {}
  #  httpGet:
  #    path: /actuator/health
  #    port: http
  #  initialDelaySeconds: 60
  #  periodSeconds: 10

  ingress:
    ## If true, Ingress will be created.
    ##
    enabled: true

    ## Ingress annotations
    ##
    # annotations:
    #   kubernetes.io/ingress.class: gce
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## hostnames must be provided if Ingress is enabled
    ##
    # hosts:
    #   - spring.example.io

    ## Ingress TLS configuration secrets
    ## Must be manually created in the namespace
    ##
    # tls:
    #   - secretName: spring-tls
    #     hosts:
    #       - spring.example.io

##############################################################
##############    FRONTEND    ####################################
##############################################################
frontend:
  name: to-do-app-frontend #for app label and app name
  labels:
    tier: frontend

  replicaCount: 1

  image:
    repository: ssonker/todoapp-frontend-node
    tag: 1.0
    imagePullPolicy: Always
  imageCredentials:
    registry: docker.io
    username: ssonker
    password: hidden

  serverUri:  #####BACKEND alb
    enabled: true
    host: a06575508010f4a8b902f20c08e57d60-886246027.us-east-2.elb.amazonaws.com
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

  ## Configures the controller port
  containerPort: 8082
  service:
    enabled: true
    httpPort: 80
    ## If service.type is not set to NodePort, the following statement
    ## will be ignored.
    ##
    # nodePort: 32015

    ## Service type can be set to ClusterIP, NodePort or LoadBalancer.
    ##
    type: ClusterIP

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  ## Labels to set container specific security contexts
  containerSecurityContext: {}
    # capabilities:
    #   drop:
    #     - all

  ## uncomment and modify the following livenessProbe and readinessProbe.
  ## These defaults should work with anything that uses the spring health actuator.
  livenessProbe: {}
  #  httpGet:
  #    path: /actuator/health
  #    port: http
  #  initialDelaySeconds: 300
  #  periodSeconds: 10
  readinessProbe: {}
  #  httpGet:
  #    path: /actuator/health
  #    port: http
  #  initialDelaySeconds: 60
  #  periodSeconds: 10


  ingress:
    ## If true, Ingress will be created.
    ##
    enabled: true

    ## Ingress annotations
    ##
    # annotations:
    #   kubernetes.io/ingress.class: gce
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## hostnames must be provided if Ingress is enabled
    ##
    # hosts:
    #   - spring.example.io

    ## Ingress TLS configuration secrets
    ## Must be manually created in the namespace
    ##
    # tls:
    #   - secretName: spring-tls
    #     hosts:
    #       - spring.example.io

##############################################################
##############    MYSQL   #####################################
##############################################################
##
## MySQL chart configuration
##
## https://github.com/helm/charts/tree/master/stable/mysql
## values: https://github.com/helm/charts/blob/master/stable/mysql/values.yaml

mysql:
  enabled: true
  image: "mysql"
  imageTag: "5.7.28"
  mysqlDatabase: db ## Create a database
  mysqlUser: db
  mysqlPassword: password
  mysqlRootPassword: root
  
  testFramework:
    enabled: false

  args:
    - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186

  ## Node selector
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  podAnnotations: {}
  podLabels: {}

## Persist data to a persistent volume
  persistence:
    enabled: true
    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 5Gi
    annotations: {}

  service:
    annotations: {}
    name: mysql
    ## Specify a service type
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services---service-types
    type: ClusterIP
    port: 3306
    # nodePort: 32000
    # loadBalancerIP:

##############################################################
##############    MONGO    ####################################
##############################################################
mongodb:
  image:
    ## Bitnami MongoDB image name
    ##
    repository: bitnami/mongodb
    ## Bitnami MongoDB image tag
    ## ref: https://hub.docker.com/r/bitnami/mongodb/tags/
    ##
    tag: 4.2.4-debian-10-r0

  ## Enable authentication
  ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
  #
  usePassword: true
  # existingSecret: name-of-existing-secret

  ## MongoDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  mongodbRootPassword: "1234"

  ## MongoDB custom user and database
  ## ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#creating-a-user-and-database-on-first-run
  ##
  mongodbUsername: username
  mongodbPassword: password
  mongodbDatabase: database

  service:
    ## Specify an explicit service name.
    name: svc-mongo
    ## Provide any additional annotations which may be required.
    ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
    annotations: {}
    type: ClusterIP
    # clusterIP: None
    port: 27017
